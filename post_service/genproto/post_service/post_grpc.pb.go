// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: post.proto

package post_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostService_Create_FullMethodName    = "/post_service.PostService/Create"
	PostService_GetSingle_FullMethodName = "/post_service.PostService/GetSingle"
	PostService_GetList_FullMethodName   = "/post_service.PostService/GetList"
	PostService_Update_FullMethodName    = "/post_service.PostService/Update"
	PostService_Delete_FullMethodName    = "/post_service.PostService/Delete"
)

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	Create(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	GetSingle(ctx context.Context, in *PostSingleRequest, opts ...grpc.CallOption) (*Post, error)
	GetList(ctx context.Context, in *GetListPostRequest, opts ...grpc.CallOption) (*PostList, error)
	Update(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	Delete(ctx context.Context, in *PostSingleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) Create(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Post)
	err := c.cc.Invoke(ctx, PostService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetSingle(ctx context.Context, in *PostSingleRequest, opts ...grpc.CallOption) (*Post, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Post)
	err := c.cc.Invoke(ctx, PostService_GetSingle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetList(ctx context.Context, in *GetListPostRequest, opts ...grpc.CallOption) (*PostList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostList)
	err := c.cc.Invoke(ctx, PostService_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) Update(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Post)
	err := c.cc.Invoke(ctx, PostService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) Delete(ctx context.Context, in *PostSingleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PostService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations should embed UnimplementedPostServiceServer
// for forward compatibility.
type PostServiceServer interface {
	Create(context.Context, *Post) (*Post, error)
	GetSingle(context.Context, *PostSingleRequest) (*Post, error)
	GetList(context.Context, *GetListPostRequest) (*PostList, error)
	Update(context.Context, *Post) (*Post, error)
	Delete(context.Context, *PostSingleRequest) (*emptypb.Empty, error)
}

// UnimplementedPostServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostServiceServer struct{}

func (UnimplementedPostServiceServer) Create(context.Context, *Post) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPostServiceServer) GetSingle(context.Context, *PostSingleRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingle not implemented")
}
func (UnimplementedPostServiceServer) GetList(context.Context, *GetListPostRequest) (*PostList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPostServiceServer) Update(context.Context, *Post) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPostServiceServer) Delete(context.Context, *PostSingleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPostServiceServer) testEmbeddedByValue() {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	// If the following call pancis, it indicates UnimplementedPostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).Create(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetSingle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetSingle(ctx, req.(*PostSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetList(ctx, req.(*GetListPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).Update(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).Delete(ctx, req.(*PostSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post_service.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PostService_Create_Handler,
		},
		{
			MethodName: "GetSingle",
			Handler:    _PostService_GetSingle_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _PostService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PostService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PostService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post.proto",
}

const (
	PostAttachmentService_Create_FullMethodName         = "/post_service.PostAttachmentService/Create"
	PostAttachmentService_MultipleUpsert_FullMethodName = "/post_service.PostAttachmentService/MultipleUpsert"
	PostAttachmentService_GetSingle_FullMethodName      = "/post_service.PostAttachmentService/GetSingle"
	PostAttachmentService_GetList_FullMethodName        = "/post_service.PostAttachmentService/GetList"
	PostAttachmentService_Delete_FullMethodName         = "/post_service.PostAttachmentService/Delete"
	PostAttachmentService_GetDefaultTags_FullMethodName = "/post_service.PostAttachmentService/GetDefaultTags"
)

// PostAttachmentServiceClient is the client API for PostAttachmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostAttachmentServiceClient interface {
	Create(ctx context.Context, in *Attachment, opts ...grpc.CallOption) (*Attachment, error)
	MultipleUpsert(ctx context.Context, in *AttachmentMultipleInsertRequest, opts ...grpc.CallOption) (*AttachmentList, error)
	GetSingle(ctx context.Context, in *AttachmentSingleRequest, opts ...grpc.CallOption) (*Attachment, error)
	GetList(ctx context.Context, in *GetListAttachmentRequest, opts ...grpc.CallOption) (*AttachmentList, error)
	Delete(ctx context.Context, in *AttachmentSingleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDefaultTags(ctx context.Context, in *GetDefaultTagsRequest, opts ...grpc.CallOption) (*GetDefaultTagsResponse, error)
}

type postAttachmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostAttachmentServiceClient(cc grpc.ClientConnInterface) PostAttachmentServiceClient {
	return &postAttachmentServiceClient{cc}
}

func (c *postAttachmentServiceClient) Create(ctx context.Context, in *Attachment, opts ...grpc.CallOption) (*Attachment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attachment)
	err := c.cc.Invoke(ctx, PostAttachmentService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postAttachmentServiceClient) MultipleUpsert(ctx context.Context, in *AttachmentMultipleInsertRequest, opts ...grpc.CallOption) (*AttachmentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentList)
	err := c.cc.Invoke(ctx, PostAttachmentService_MultipleUpsert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postAttachmentServiceClient) GetSingle(ctx context.Context, in *AttachmentSingleRequest, opts ...grpc.CallOption) (*Attachment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attachment)
	err := c.cc.Invoke(ctx, PostAttachmentService_GetSingle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postAttachmentServiceClient) GetList(ctx context.Context, in *GetListAttachmentRequest, opts ...grpc.CallOption) (*AttachmentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentList)
	err := c.cc.Invoke(ctx, PostAttachmentService_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postAttachmentServiceClient) Delete(ctx context.Context, in *AttachmentSingleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PostAttachmentService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postAttachmentServiceClient) GetDefaultTags(ctx context.Context, in *GetDefaultTagsRequest, opts ...grpc.CallOption) (*GetDefaultTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefaultTagsResponse)
	err := c.cc.Invoke(ctx, PostAttachmentService_GetDefaultTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostAttachmentServiceServer is the server API for PostAttachmentService service.
// All implementations should embed UnimplementedPostAttachmentServiceServer
// for forward compatibility.
type PostAttachmentServiceServer interface {
	Create(context.Context, *Attachment) (*Attachment, error)
	MultipleUpsert(context.Context, *AttachmentMultipleInsertRequest) (*AttachmentList, error)
	GetSingle(context.Context, *AttachmentSingleRequest) (*Attachment, error)
	GetList(context.Context, *GetListAttachmentRequest) (*AttachmentList, error)
	Delete(context.Context, *AttachmentSingleRequest) (*emptypb.Empty, error)
	GetDefaultTags(context.Context, *GetDefaultTagsRequest) (*GetDefaultTagsResponse, error)
}

// UnimplementedPostAttachmentServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostAttachmentServiceServer struct{}

func (UnimplementedPostAttachmentServiceServer) Create(context.Context, *Attachment) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPostAttachmentServiceServer) MultipleUpsert(context.Context, *AttachmentMultipleInsertRequest) (*AttachmentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultipleUpsert not implemented")
}
func (UnimplementedPostAttachmentServiceServer) GetSingle(context.Context, *AttachmentSingleRequest) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingle not implemented")
}
func (UnimplementedPostAttachmentServiceServer) GetList(context.Context, *GetListAttachmentRequest) (*AttachmentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPostAttachmentServiceServer) Delete(context.Context, *AttachmentSingleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPostAttachmentServiceServer) GetDefaultTags(context.Context, *GetDefaultTagsRequest) (*GetDefaultTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultTags not implemented")
}
func (UnimplementedPostAttachmentServiceServer) testEmbeddedByValue() {}

// UnsafePostAttachmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostAttachmentServiceServer will
// result in compilation errors.
type UnsafePostAttachmentServiceServer interface {
	mustEmbedUnimplementedPostAttachmentServiceServer()
}

func RegisterPostAttachmentServiceServer(s grpc.ServiceRegistrar, srv PostAttachmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPostAttachmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostAttachmentService_ServiceDesc, srv)
}

func _PostAttachmentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attachment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAttachmentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostAttachmentService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAttachmentServiceServer).Create(ctx, req.(*Attachment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostAttachmentService_MultipleUpsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachmentMultipleInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAttachmentServiceServer).MultipleUpsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostAttachmentService_MultipleUpsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAttachmentServiceServer).MultipleUpsert(ctx, req.(*AttachmentMultipleInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostAttachmentService_GetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachmentSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAttachmentServiceServer).GetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostAttachmentService_GetSingle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAttachmentServiceServer).GetSingle(ctx, req.(*AttachmentSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostAttachmentService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAttachmentServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostAttachmentService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAttachmentServiceServer).GetList(ctx, req.(*GetListAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostAttachmentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachmentSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAttachmentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostAttachmentService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAttachmentServiceServer).Delete(ctx, req.(*AttachmentSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostAttachmentService_GetDefaultTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostAttachmentServiceServer).GetDefaultTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostAttachmentService_GetDefaultTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostAttachmentServiceServer).GetDefaultTags(ctx, req.(*GetDefaultTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostAttachmentService_ServiceDesc is the grpc.ServiceDesc for PostAttachmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostAttachmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post_service.PostAttachmentService",
	HandlerType: (*PostAttachmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PostAttachmentService_Create_Handler,
		},
		{
			MethodName: "MultipleUpsert",
			Handler:    _PostAttachmentService_MultipleUpsert_Handler,
		},
		{
			MethodName: "GetSingle",
			Handler:    _PostAttachmentService_GetSingle_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _PostAttachmentService_GetList_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PostAttachmentService_Delete_Handler,
		},
		{
			MethodName: "GetDefaultTags",
			Handler:    _PostAttachmentService_GetDefaultTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post.proto",
}
