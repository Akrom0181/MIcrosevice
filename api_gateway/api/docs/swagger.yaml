definitions:
  post_service.Attachment:
    properties:
      content_type:
        type: string
      created_at:
        type: string
      filepath:
        type: string
      id:
        type: string
      post_id:
        type: string
      updated_at:
        type: string
    type: object
  post_service.Post:
    properties:
      attachments:
        items:
          $ref: '#/definitions/post_service.Attachment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      owner_id:
        type: string
      status:
        type: string
      tags:
        additionalProperties:
          $ref: '#/definitions/post_service.StringList'
        type: object
      updated_at:
        type: string
    type: object
  post_service.PostList:
    properties:
      count:
        type: integer
      items:
        items:
          $ref: '#/definitions/post_service.Post'
        type: array
    type: object
  post_service.StringList:
    properties:
      values:
        items:
          type: string
        type: array
    type: object
  user_service.ErrorResponse:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  user_service.GetListSessionResponse:
    properties:
      count:
        type: integer
      sessions:
        items:
          $ref: '#/definitions/user_service.Session'
        type: array
    type: object
  user_service.GetListUserResponse:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/user_service.User'
        type: array
    type: object
  user_service.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
      platform:
        type: string
      username:
        type: string
    type: object
  user_service.RegisterRequest:
    properties:
      email:
        type: string
      fullname:
        type: string
      gender:
        type: string
      password:
        type: string
      status:
        type: string
      username:
        type: string
      userrole:
        type: string
      usertype:
        type: string
    type: object
  user_service.Session:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      ip_address:
        type: string
      is_active:
        type: boolean
      last_active_at:
        type: string
      platform:
        type: string
      updated_at:
        type: string
      user_agent:
        type: string
      user_id:
        type: string
    type: object
  user_service.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  user_service.User:
    properties:
      access_token:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: string
      password:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_name:
        type: string
      user_role:
        type: string
      user_type:
        type: string
    type: object
  user_service.VerifyEmailRequest:
    properties:
      email:
        type: string
      otp:
        type: string
      platform:
        type: string
    type: object
  user_service.VerifyEmailResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a Go Microservice API
  title: Go Microservice API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user_service.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      summary: Login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user_service.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      summary: Register
      tags:
      - auth
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user_service.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.VerifyEmailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      summary: Register
      tags:
      - auth
  /post:
    post:
      consumes:
      - application/json
      description: Create a new post
      parameters:
      - description: Post object
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/post_service.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/post_service.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - post
    put:
      consumes:
      - application/json
      description: Update a post
      parameters:
      - description: Post object
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/post_service.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post_service.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a post
      tags:
      - post
  /post/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - post
    get:
      consumes:
      - application/json
      description: Get a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post_service.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a post by ID
      tags:
      - post
  /post/list:
    get:
      consumes:
      - application/json
      description: Get a list of posts
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      - description: owner_id
        in: query
        name: owner_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post_service.PostList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of posts
      tags:
      - post
  /session:
    put:
      consumes:
      - application/json
      description: Update a session
      parameters:
      - description: Session object
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/user_service.Session'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Session'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a session
      tags:
      - session
  /session/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a session
      tags:
      - session
    get:
      consumes:
      - application/json
      description: Get a session by ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Session'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a session by ID
      tags:
      - session
  /session/list:
    get:
      consumes:
      - application/json
      description: Get a list of users
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      - description: user_id
        in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetListSessionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of users
      tags:
      - session
  /user:
    post:
      consumes:
      - application/json
      description: API for creating user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user_service.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: API for updating a user by ID
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user_service.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user by ID
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: API for deleting a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a teacher by ID
      tags:
      - user
    get:
      consumes:
      - application/json
      description: API for getting a single user by ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a single user by ID
      tags:
      - user
  /user/list:
    get:
      consumes:
      - application/json
      description: API for getting list of users
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetListUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user_service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get list of users
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
